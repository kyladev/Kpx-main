export type Deps = {
    crypto: Crypto;
    TransformStream: typeof TransformStream;
};
export type Params = {
    counterLength: 64 | 128;
    namedCurve: "P-256" | "P-384" | "P-521";
    keyLength: 128 | 192 | 256;
};
export type Options = {
    deps?: Deps;
    params?: Params;
};
export type Marshalled = {
    params: Params;
    keyPair: CryptoKeyPair | null;
};
export type KeyGenOptions = {
    extractable?: boolean;
    additionalUsages?: KeyUsage[];
};
export type UnmarshalOptions = {
    marshalled: Marshalled;
    deps?: Deps;
};
export declare class E2EE {
    #private;
    /**
     * @param options
     * @param options.deps Optionally inject your own platform dependencies.
     * @param options.deps.crypto An implementation of the WebCrypto API. Defaults to `globalThis.crypto`.
     * @param options.params Optionally override the default security parameters.
     * @param options.params.counterLength The length of the counter used in AES-CTR. Defaults to `64`.
     * @param options.params.namedCurve The named curve used in ECDH. Defaults to `P-256`.
     * @param options.params.keyLength The length of the key used in AES-CTR. Defaults to `256`.
     */
    constructor(options?: Options);
    /**
     * Generates an ECDH key pair for this party.
     * @param options
     * @param options.extractable Whether the key should be extractable. Defaults to `false`. SECURITY: Leave it to false, unless you know what you're doing.
     * @param options.additionalUsages Additional usages for the key. Defaults to `[]`.
     */
    generateKeyPair({ extractable, additionalUsages }?: KeyGenOptions): Promise<void>;
    /**
     * @returns The public key of this party, serialised as a JWK.
     */
    exportPublicKey(): Promise<string>;
    /**
     * Set the public key generated by calling `exportPublicKey()` on another party. Provide an identifier
     * if you want to communicate with multiple parties from this one instance.
     * @param remotePublicKey The public key that was exported from another party, serialised as a JWK.
     * @param identifier Optional identifier for the other party, used for multi-cast communication. You can refer to this
     * identifier in future `encrypt()` and `decrypt()` calls to specify which party you want to communicate with.
     */
    setRemotePublicKey(remotePublicKey: string, identifier?: string | symbol): Promise<void>;
    /**
     * Encrypts the provided string with AES-CTR using the shared secret generated via the key exchange as the key.
     * @param plaintext Any JS string.
     * @param identifier Optional identifier for the other party, used for multi-cast communication.
     * @returns A string representing the ciphertext.
     */
    encrypt(plaintext: string, identifier?: string | symbol): Promise<string>;
    /**
     * A way to encrypt streaming Uint8Array data.
     * @param identifier Optional identifier for the other party, used for multi-cast communication
     * @returns A TransformStream that can be fitted in any pipeline to encrypt the data flowing through it.
     */
    encryptStream(identifier?: string | symbol): TransformStream<Uint8Array, string>;
    /**
     * Decrypts the provided string with AES-CTR using the shared secret generated via the key exchange as the key.
     * @param ciphertext A string representing the ciphertext.
     * @param identifier Optional identifier for the other party, used for multi-cast communication.
     * @returns The decrypted string.
     */
    decrypt(ciphertext: string, identifier?: string | symbol): Promise<string>;
    /**
     * Opposite of `encryptStream()`
     * @param identifier Optional identifier for the other party, used for multi-cast communication.
     * @returns A TransformStream that can be fitted in any pipeline to decrypt the data flowing through it.
     */
    decryptStream(identifier?: string | symbol): TransformStream<string, Uint8Array>;
    /**
     *
     * @returns The parameters used to create this instance of E2EE.
     */
    exportParams(): Params;
    /**
     * A secure way to marshal this party's security parameters and key pair.
     * The key pair is returned as a `CryptoKeyPair` object, which means that the `CryptoKey` objects corresponding
     * to the two keys are facades. In particular, the private key cannot be viewed from JavaScript. As such, you cannot
     * serialise the key pair. Instead, store it in IndexedDB.
     * @returns An object with the security parameters of this party, and the key pair if it has been generated.
     */
    marshal(): {
        keyPair: CryptoKeyPair;
        params: Params;
    };
    /**
     * Restore a previously marshalled instance of `E2EE`.
     * @param options
     * @param options.marshalled The object returned by `marshal()`.
     * @param options.deps Optionally inject your own platform dependencies.
     * @returns A new instance of `E2EE` with the same security parameters and key pair as the marshalled instance.
     */
    static unmarshal({ marshalled: { keyPair, params }, deps }: {
        marshalled: {
            keyPair: any;
            params: any;
        };
        deps: any;
    }): E2EE;
    /**
     * In case you want to share the identity of this party across multiple instances of this class (maybe you want
     * to support multiple devices), use this method to securely share the private key between the devices.
     *
     * SECURITY: Make sure you handle the private key securely. It will be visible to JavaScript.
     * @returns  The private key of this party, serialised as a JWK.
     */
    exportPrivateKey(): Promise<string>;
    /**
     * Used in conjunction with `exportPrivateKey()` to share the private key between multiple instances of this class.
     *
     * SECURITY: Make sure you handle the private key securely. It will be visible to JavaScript.
     *
     * You can also use this to migrate your existing identities into this library.
     * @param options
     * @param options.privateKey The JWK of the private key you want to import.
     * @param options.publicKey The JWK of the public key you want to import.
     */
    importKeyPair({ privateKey, publicKey }: {
        privateKey: string;
        publicKey: string;
    }): Promise<void>;
}
//# sourceMappingURL=e2ee.d.ts.map